import pandas as pd
import argparse
import matplotlib.pyplot as plt
import numpy

def generate_figure_evolution_quality_according_number_cases(scale, nb_rates):
    # Data
    result_data = pd.read_csv("Result_Data.csv", sep = ";", index_col=None)
    res_bve = result_data.loc[(result_data["Scale"]==scale) & (result_data["Number of Rates"]==nb_rates)]
    #Plot
    plt.rcParams["figure.figsize"] = [12.50, 5.50]
    plt.rcParams["figure.autolayout"] = True
    features=["Geomorphology", "Geomorphology + Vulnerability"]
    for feature in features: #res_bve.Features.unique():
        res = res_bve.loc[res_bve["Features"]==feature]
        res = res.sort_values("Number of Cases")
    #print(res)
        #plt.plot(res['Number of Cases'], res["Mean of Quality Metric"], label=feature, marker="o")
        plt.errorbar(res['Number of Cases'], res["Mean of Quality Metric"], res["Std of Quality Metric"], label=feature, marker="o")
        z = numpy.polyfit(res['Number of Cases'], res["Mean of Quality Metric"], 1)
        p = numpy.poly1d(z)
        print(feature, z)
        print("Roots:", p.r)
        #plt.plot(res['Number of Cases'], p(res['Number of Cases']), '-')
        
    # Add title and axis names
    if scale == "BVE":
        plt.xticks(range(5,26, 5),range(5,26, 5))
        sc = "Catchment areas"
    elif scale == "SUB":
        plt.xticks(range(5,46, 5),range(5,46, 5))
        sc= "Sub-catchment areas"
    
    plt.yticks([x / 1000.0 for x in range(10,56, 5)],[x / 1000.0 for x in range(10,56, 5)])
    plt.title('Evolution of the Global Error Generated by the Prediction \n According to the Number of Cases considered in the Dataset \n Scale: '+ str(sc) + ' , Np=' + str(nb_rates))
    plt.xlabel('Number of Cases')
    plt.ylabel('Global Error Metric \n(Mean Error Introduced by the Prediction, in meters)')
    plt.legend(title="Features", bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)
    #plt.show()
    plt.savefig("Evolution_Quality_Number_Cases_"+ str(scale) + "_Rates_" + str(nb_rates) + ".pdf")

    
    return plt


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--features", type=str, required=False)
    parser.add_argument("-nbrate", type=int, required=True)
    parser.add_argument("-sc", type=str, required=True)
    parser.add_argument("-onecase", action='store_true')
    parser.add_argument("-rep", type=int, required=False)
    parser.add_argument("-seed", type=int, required=False)
    parser.add_argument("-size", type=int, required=False)
    args = parser.parse_args()

    features = args.features
    nb_rates = args.nbrate
    scale = args.sc
    nb_replication = args.rep
    seed = args.seed
    one_case = args.onecase
    size = args.size

    plt = generate_figure_evolution_quality_according_number_cases(scale, nb_rates)
